# Dockerfile for background workers
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY package.json package-lock.json* ./
RUN npm ci --omit=dev

# Build stage
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Compile TypeScript
RUN npx tsc --build

# Production stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Create non-root user
RUN addgroup --system --gid 1001 workers
RUN adduser --system --uid 1001 worker

# Copy compiled application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Copy Prisma files
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Copy worker scripts
COPY --from=builder /app/scripts ./scripts

# Create logs directory
RUN mkdir -p /app/logs && chown -R worker:workers /app/logs

USER worker

# Health check for workers
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=3 \
  CMD node -e "const { checkQueueHealth } = require('./dist/lib/queue.js'); checkQueueHealth().then(h => process.exit(h.redis ? 0 : 1)).catch(() => process.exit(1))"

CMD ["node", "scripts/start-workers.js"]